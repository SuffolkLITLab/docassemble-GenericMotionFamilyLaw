---
include:
  - docassemble.MAVirtualCourt:basic-questions.yml
---
mandatory: True
code: |
  interview_metadata # make sure we initialize the object
  if not defined("interview_metadata['Generic_Motion_Family_Law_relabeled0014']"):
    interview_metadata.initializeObject('Generic_Motion_Family_Law_relabeled0014')
  interview_metadata['Generic_Motion_Family_Law_relabeled0014'].update({
    'title': 'Motion (Family Law)',
    'short title': 'Generic Motion Family Law',
    'description': 'Generic Motion Family Law',
    'original_form': 'masslegalhelp.org',
    'allowed courts': [
      'Probate and Family Court',
    ],
    'preferred court': 'Probate and Family Court',
    'categories': [
      'Family Law',
    ],
    'logic block variable': 'Generic_Motion_Family_Law_relabeled0014',
    'attachment block variable': 'Generic_Motion_Family_Law_relabeled0014_attachment',
    'typical role': 'unknown',
    'built_in_fields_used': [
      {'variable': 'docket_number',
       'transformed_variable': 'docket_numbers[0]',
      },
      {'variable': 'plaintiff',
       'transformed_variable': 'str(plaintiffs[0])',
      },
      {'variable': 'defendant',
       'transformed_variable': 'str(defendants[0])',
      },
      {'variable': 'user_name',
       'transformed_variable': 'str(users[0])',
      },
      {'variable': 'signature_date__1',
       'transformed_variable': 'signature_date',
      },
      {'variable': 'user_signature',
       'transformed_variable': 'users[0].signature',
      },
      {'variable': 'user_name__2',
       'transformed_variable': 'str(users[0])',
      },
      {'variable': 'user_address_street',
       'transformed_variable': 'users[0].address.address',
      },
      {'variable': 'user_address_city',
       'transformed_variable': 'users[0].address.city',
      },
      {'variable': 'user_address_state',
       'transformed_variable': 'users[0].address.state',
      },
      {'variable': 'user_address_zip',
       'transformed_variable': 'users[0].address.zip',
      },
      {'variable': 'user_phone',
       'transformed_variable': 'users[0].phone_number',
      },
      {'variable': 'docket_number__2',
       'transformed_variable': 'docket_numbers[0]',
      },
      {'variable': 'signature_date__2',
       'transformed_variable': 'signature_date',
      },
      {'variable': 'other_party_name',
       'transformed_variable': 'str(other_parties[0])',
      },
      {'variable': 'other_party_address_street',
       'transformed_variable': 'other_parties[0].address.address',
      },
      {'variable': 'other_party_address_city',
       'transformed_variable': 'other_parties[0].address.city',
      },
      {'variable': 'other_party_address_state',
       'transformed_variable': 'other_parties[0].address.state',
      },
      {'variable': 'other_party_address_zip',
       'transformed_variable': 'other_parties[0].address.zip',
      },
      {'variable': 'user_signature__2',
       'transformed_variable': 'users[0].signature',
      },
      ],
    'fields': [
      {'variable': 'court_division',
       'transformed_variable': 'courts[0].division',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'motion_name',
       'transformed_variable': 'motion_name',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'user_is_petitioner',
       'transformed_variable': 'users[0].is_petitioner',
      'field_type': 'yesno',
      },
      {'variable': 'user_is_defendant',
       'transformed_variable': 'users[0].is_defendant',
      'field_type': 'yesno',
      },
      {'variable': 'user_is_plaintiff',
       'transformed_variable': 'users[0].is_plaintiff',
      'field_type': 'yesno',
      },
      {'variable': 'user_is_respondent',
       'transformed_variable': 'users[0].is_respondent',
      'field_type': 'yesno',
      },
      {'variable': 'user_request',
       'transformed_variable': 'users[0].request',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'hearing_city',
       'transformed_variable': 'hearing_city',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'hearing_date_month_day_year',
       'transformed_variable': 'hearing_date_month_day_year',
      'field_type': 'text',
      'field_data_type': 'date',
      },
      {'variable': 'hearing_time',
       'transformed_variable': 'hearing_time',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'bbo_number',
       'transformed_variable': 'bbo_number',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division__2',
       'transformed_variable': 'courts[0].division',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'motion_name__2',
       'transformed_variable': 'motion_name',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'service_by_hand_date',
       'transformed_variable': 'service_by_hand_date',
      'field_type': 'text',
      'field_data_type': 'date',
      },
      {'variable': 'service_by_hand_time',
       'transformed_variable': 'service_by_hand_time',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'service_by_hand',
       'transformed_variable': 'service_by_hand',
      'field_type': 'yesno',
      },
      {'variable': 'service_by_hand_in_pm',
       'transformed_variable': 'service_by_hand_in_pm',
      'field_type': 'yesno',
      },
      {'variable': 'service_by_hand_in_am',
       'transformed_variable': 'service_by_hand_in_am',
      'field_type': 'yesno',
      },
      {'variable': 'service_by_mailing_date',
       'transformed_variable': 'service_by_mailing_date',
      'field_type': 'text',
      'field_data_type': 'date',
      },
      {'variable': 'service_by_mailing',
       'transformed_variable': 'service_by_mailing',
      'field_type': 'yesno',
      },
      ],
  })
---
id: interview_order_Generic_Motion_Family_Law_relabeled0014
mandatory: True
code: |
  # This is a placeholder to control logic flow in this interview
  # It was generated from interview_generator.py as an 'interview order' type question.
  basic_questions_intro_screen 
  if not Generic_Motion_Family_Law_relabeled0014_intro:
    kick_out_no_existing_case
  if not court_papers: 
    kick_out_no_paperwork
  # Set the preferred/allowed courts for this interview
  preferred_court = interview_metadata["Generic_Motion_Family_Law_relabeled0014"]["preferred court"]
  allowed_courts = interview_metadata["Generic_Motion_Family_Law_relabeled0014"]["allowed courts"]
  courts[0].division
  docket_numbers[0]
  user_has_hearing_date
  str(users[0])
  stop_collecting_users
  str(other_parties[0])
  if lives_in_domestic_violence_shelter or impound_address: 
    set_impoundment_address
    #set_impoundment_request
    if should_impound_phone_number: 
      set_impoundment_phone_number
    else:
      users[0].phone_number
      #triggers asking for the user's phone number 
      set_actual_phone_number
  else: 
    users[0].address.address
    users[0].address.unit
    users[0].address.city
    users[0].address.state
    users[0].address.zip
    users[0].phone_number
    set_actual_phone_number
  users[0].phone_number
  user_needs_interpreter
  if not op_address_impounded: 
    other_parties[0].address.address
    other_parties[0].address.unit
    other_parties[0].address.city
    other_parties[0].address.state
    other_parties[0].address.zip
  which_role
  set_parties
  motion_name
  #set_users_request triggers requested_information
  set_users_request
  if emergency_basis: 
    set_emergency_request  
  if not op_address_impounded:
    ready_to_serve
  # Background logic 
  str(plaintiffs)
  str(defendants)
  assign_user_role
  # By default, we'll mark any un-filled fields as DAEmpty(). This helps avoid errors if you intentionally hide a logic branch or mark a question not required
  # Comment out the line below if you don't want this behavior. 
  #mark_unfilled_fields_empty(interview_metadata["Generic_Motion_Family_Law_relabeled0014"])
  #Generic_Motion_Family_Law_relabeled0014_preview_question # Pre-canned preview screen
  preview_screen
  basic_questions_signature_flow
  users[0].signature
  #if lives_in_domestic_violence_shelter or impound_address or op_address_impounded: 
    #set_impoundment_request
  signature_date = today()
  Generic_Motion_Family_Law_relabeled0014 = True
  download
---
id: Introduction 
question: |
  Probate and Family Court Motion Form 
subquestion: |
  You can use this form to file many kinds of motions while your case is in the Probate and Family Court.  
  
  Before you use this interview, you must already have a case in the Probate and Family Court.
  
  Do you have a case in the Probate and Family Court?
yesno: Generic_Motion_Family_Law_relabeled0014_intro
---
id: Kick out screen for no existing case
event: kick_out_no_existing_case
question: |
  Sorry, this form is not for you 
subquestion: |
  You said you do not have a case in the Probate and Family Court. 
  This interview is only for people who already have a case in the Probate and Family Court. 
  
  If you need to ask the court for help, you need to start a new case.
  
  For example: 
  
  * [Get a domestic violence restraining order](https://massaccess.suffolklitlab.org/dv/).
  * [Get Child Support](https://www.masslegalhelp.org/children-and-families/how-to-get-a-child-support-order).
  * [Ask for a Parenting Time Order](https://www.masslegalhelp.org/children-and-families/parenting-time/getting/complaint).
  * [Other kinds of orders](https://www.masslegalhelp.org/children-and-families/probate-and-family-court/how-do-I-file).
buttons:
  - Exit: exit
    url: https://massaccess.suffolklitlab.org/
  - Restart: restart
---
id: court papers 
question: |
  Do you know the court name and your docket number? 
subquestion: |  
  You can find this information on the Complaint or other court paperwork.
yesno: court_papers
---
id: Kick out screen for no paperwork
event: kick_out_no_paperwork
question: |
  Wait to fill out this form until you know the court name and your docket number
subquestion: | 
  You can find this information on the: 
   
  * Complaint,
  * Summons, or
  * Other motions in this case.
buttons:
  - Exit: exit
    url: https://massaccess.suffolklitlab.org/
  - Restart: restart
---
id: name of opposing party
question: |
  Who is on the 'other side' of your case?
fields:
  - Are they a person or business?: other_parties[0].person_type
    input type: radio
    choices:
      - Business, organization, or entity: business
      - Person: individual
  - First name: other_parties[0].name.first
    show if:
      variable: other_parties[0].person_type
      is: "individual"
  - Last name: other_parties[0].name.last
    show if:
      variable: other_parties[0].person_type      
      is: "individual"
  - Suffix: other_parties[0].name.suffix
    code: |
      name_suffix()
    show if:
      variable: other_parties[0].person_type      
      is: "individual"
    required: False      
  - Name of business, organization, or entity: other_parties[0].name.first
    show if:
      variable: other_parties[0].person_type
      is: business
---
id: User Address
question: |
  What is your address?
subquestion: |
  Put in the address the Court should use to mail papers to you.
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Unit: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list()
    default: MA      
  - Zip: users[0].address.zip 
---
id: other party address
generic object: Individual
question: |
  What is ${ other_parties[0].familiar() }'s address?
fields:
  - ${ other_parties[0].familiar() }'s address is impounded.: op_address_impounded
    datatype: yesno
  - Street address: other_parties[0].address.address
    address autocomplete: True
    hide if: op_address_impounded
  - Unit: other_parties[0].address.unit
    required: False
    hide if: op_address_impounded
  - City: other_parties[0].address.city
    hide if: op_address_impounded
  - State: other_parties[0].address.state
    default: MA   
    code: |
      states_list()   
    hide if: op_address_impounded
  - Zip: other_parties[0].address.zip
    hide if: op_address_impounded
---
sets: set_parties 
scan for variables: False
code: |
  if which_role == "plaintiff" or which_role == "petitioner": 
    user_role = "plaintiff"
  if which_role == "defendant" or which_role == "respondent": 
    user_role = "defendant"
   
  # set_parties = True must be the very last line of this code block.
  
  set_parties = True
---
sets: set_emergency_request
scan for variables: False
code: |
  # set_request_emergency = True must be the very last line of this code block. 
  role_capitalized = capitalize( which_role )
  emergency_text = "\n" + role_capitalized + " asks that this motion be heard as soon as possible by remote hearing as " + role_capitalized + " has demonstrated exceptional or exigent circumstances, as contemplated by Standing Order 2-20." 
  users[0].request = users[0].request + emergency_text 

  set_emergency_request = True
---
id: emergency basis request
question: |
  Is this an emergency?
yesno: emergency_basis
subquestion: | 
  During the COVID-19 crisis, the courts are only hearing some cases. 
  
  Emergencies will get priority. 
    
  Read more about [the cases the Court is hearing right now](https://www.masslegalhelp.org/covid-19-courts/probate-family).
---
id: impoundment 
question: |
  Keeping your information safe
subquestion:
  Normally ${ other_parties[0].familiar() } will see your address and contact information.
  But if you live in a domestic violence shelter or if the court granted a Motion to Impound your address, ${ other_parties[0].familiar() } will not be able to see your information. 
fields: 
  - Do you live in a domestic violence shelter? : lives_in_domestic_violence_shelter
    datatype: yesnoradio
  - Did the Court grant a Motion to Impound your address in this case?: impound_address
    datatype: yesnoradio
  - Do you need the Court to keep your phone number from ${ other_parties[0].familiar() } also?: should_impound_phone_number
    datatype: yesnoradio
    note: |
      The Court will still use your phone number to contact you.
    js show if: |
      val("impound_address") || val("lives_in_domestic_violence_shelter")
#---
#sets: set_impoundment_request
#scan for variables: False
#code: |
#  # set_impoundment_request = True must be the very last line of this code block. 
#  role_capitalized = capitalize( which_role )
#  impoundment_text = "\n" + role_capitalized + " has indicated that some portion of the file has been impounded."
#  comments_to_clerk = comments_to_clerk + impoundment_text
#
#  set_impoundment_request = True
---
sets: set_impoundment_address
scan for variables: False
code: | 
  users[0].address.address = "Address Impounded"
  users[0].address.city = ""
  users[0].address.state = ""
  users[0].address.zip = ""
  

  # set_impoundment_address must alwasy be at the bottom of the code block. 
  set_impoundment_address = True 
---
sets: set_impoundment_phone_number
scan for variables: False
code: | 
  phone_number_pdf = ""
  

  # set_impoundment_phone_number must alwasy be at the bottom of the code block. 
  set_impoundment_phone_number = True 
--- 
sets: set_actual_phone_number
scan for variables: False
code: | 
  phone_number_pdf = users[0].phone_numbers()


  # set_actual_phone_number must alwasy be at the bottom of the code block. 
  set_actual_phone_number = True 
---
code: |
  user_attorney = DAEmpty()
  bbo_number = DAEmpty()  
---
id: hearing information
question: |
  Do you have a hearing date?    
fields:
  - no label: user_has_hearing_date
    datatype: yesnoradio 
  - Hearing City: hearing_city
    required: False 
    show if: user_has_hearing_date
  - Hearing Date: hearing_date_month_day_year
    datatype: date
    required: False
    show if: user_has_hearing_date
  - Hearing Time: hearing_time
    datatype: time
    required: False
    show if: user_has_hearing_date
---
id: motion title 
question: |
  What is this motion for?
subquestion: |  
    This will be the name of the motion. Name the motion something short that explains what you need the judge to do. 
    
    Helpful example: Visitation 

    Not so helpful example: I do not want George to be able to see the children because he is not safe to be around. 
fields:
  - 'Motion for:': motion_name
---
id: service information
question: |
   Will you be able to mail a copy of this motion to ${ other_parties[0].familiar() } immediately upon completing this form?
subquestion:
  Getting a copy of this motion to ${ other_parties[0].familiar() } is called "service."  
  
  You must do service by getting ${ other_parties[0].familiar() } a copy of this motion. 
   
fields: 
  - no label: ready_to_serve
    datatype: yesnoradio  
  - 'Date of service by mailing': service_by_mailing_date
    datatype: date
    default: ${today().format("MM-dd-yyyy")}
    show if: ready_to_serve
  - note: |
      You will need to discuss service with the clerk who will call you by the end of the next business day after you submit this form.
    js show if: |
      ! val("ready_to_serve") 
---
id: not ready to serve
question: |
  You will need to discuss service with the clerk who will call you by the end of the next business day after you submit this form

buttons:
  - Continue: continue
---
id: user request
question: |
  Tell the Court what you are asking for
subquestion: |
  Be as specific as possible. See examples below.
fields:
  - 'What do you need the Court to order?': requested_information 
    input type: area
    rows: 8
  - 'Why do you need the Court to make this order?': requested_reason_to_allow_this_motion
    input type: area
    rows: 8
help:
  label: |
    Examples
  content: |
    Example what: “I need the Court to give me sole legal and physical custody of my children. I need the defendant to have Parenting Time every other weekend from Friday at 6 PM to Monday at 9 AM, with pickup and drop-off at my house. I also ask that the Court order the defendant to pay me child support.”
    
    Example why: "I need the Court to make this order because I have always taken care of our children most of the time. I have gone to all of their doctor's appointments and parent-teacher conferences. The defendant usually just sees the children once every couple of weeks so I should be the one to have custody."
---
sets: set_users_request
scan for variables: False
code: |
  # set_users_request = True must be the very last line of this code block. 
  users[0].request = fix_punctuation(requested_information) + " " + fix_punctuation(requested_reason_to_allow_this_motion)

  set_users_request = True
---
id: docket numbers
question: |
  What is the docket number for this case?
subquestion: |
  If there are multiple docket numbers on this form, you can click "${word("Add another")}"
  to add more than one.
list collect: True
fields:
  - no label: docket_numbers[i]
    required: True
---
code: |
  users.ask_number = True 
  users.target_number = 1
  other_parties.ask_number = True
  other_parties.target_number = 1
  stop_collecting_users = True 
---
id: user role
question: |
  Did you start this case, or are you responding to a case
  that ${ other_parties[0].familiar() } started?
fields: 
  - no label: user_ask_role
    input type: radio
    choices: 
      - I am starting this case. 
      - I am responding to this case.
  - Are you the plaintiff or petitioner?: which_role
    input type: radio    
    choices: 
      - Plaintiff: plaintiff 
      - Petitioner: petitioner 
      - I do not know: plaintiff
    show if:
      variable: user_ask_role 
      is: I am starting this case.
  - Are you the defendant or respondent?: which_role
    input type: radio    
    choices: 
      - Defendant: defendant
      - Respondent: respondent
      - I do not know: defendant
    show if:
      variable: user_ask_role 
      is: I am responding in this case.
help:
  label: |
    How do I know?
  content: |
    If you are the first person to file a form in the case, you 
    started the case. You are the "Plaintiff" or the "Petitioner."
  
    If you are responding to a case or court papers someone else filed, you
    are the "Defendant" or the "Respondent."
---
code: |
  users[0].is_petitioner = which_role == "petitioner"
  users[0].is_defendant = which_role == "defendant"
  users[0].is_plaintiff = which_role == "plaintiff"
  users[0].is_respondent = which_role == "respondent"
  assign_user_role = True
---
id: review 
event: review_all_sections
question: |
  Review of your answers
subquestion: |
  
  ${showifdef('form_to_sign')}

  % if defined('form_delivery_complete'):
  **Warning: your form has already been delivered.** Any changes you make
  will _not_ be sent to the court.

  % endif
  Click a section to revisit the answers from that section.

  % for section in section_links(nav):
  * ${section}
  % endfor
  
  Press "${word("Resume")}" to resume the
  interview.
buttons:
  ${word("Resume")}: continue
---
id: review before signature
need: form_to_sign
continue button field: preview_screen
question: |
  Nearly finished
subquestion: |
  You are almost done! Please click on the form below. It will open in a new window so you can review it and make sure it is correct.
  
  Don't forget to come back to this page to click to the final step of signing and sending the form to the court. 
  
   ${ form_to_sign }

progress: 95
---
id: download form
event: download
comment: |
  The attachment email screen relies on final_form_to_file being defined. This
  will be built from the interview_metadata dictionary's contents, but if you
  add any addenda you will want to set this in a code block somewhere that takes
  priority over basic-questions.yml.
decoration: file-download
question: |
  % if not defined('email_success') or not email_success:
  Review, Download, and Send Form
  % else:
  Form delivered
  % endif
subquestion: |
  % if not defined('email_success') or not email_success:
  Thank you ${users[0]}. Your form is ready to send to the court. **It is not
  delivered until you complete the delivery process below.**

  1. Click the preview image below to open the form in a new window. Correct any errors using the "Make changes" button below.
  2. Download and save or print a copy of this form for your 
  records.
  3. Click the "Submit to ${courts[0]}" button to send it to the court. 
  4. You will have a chance to add instructions to the clerk and see the cover page before final delivery.
  % else:
  If you do not hear from the court in 1 business day, call the Trial Court’s
  Emergency HelpLine 833-91-COURT (833-912-6878).
  
  The Emergency HelpLine is open:  
  8:30am - 4:30pm,   
  Monday - Friday.
  % endif
  
  ${ form_to_file_no_cover }  
  
  ${action_button_html(url_action('review_all_sections'), icon='edit', label=word("Make changes"))}
  
  % if not defined('email_success') or not email_success:
    ${ action_button_html( url_action('form_delivery_complete'), id_tag="submitToCourt", label="Submit to " + str(courts[0].name), icon=send_icon, size="md", color="primary")}
    
  Or download/email below:
  % else:
    Your email has already been delivered to ${courts[0]}
    
  [:file-download: Download with cover page](${final_form_to_file.url_for()})    
  % endif
progress: 100
attachment code: Generic_Motion_Family_Law_relabeled0014_attachment
section: download
---
progress: 100
mandatory: False
question: |
  Placeholder download screen
subquestion: |
  Placeholder
  
  ### Next steps
  
  1. Step 1
  1. Step 2
  
  Below is a preview of your form.
  
  ${ Generic_Motion_Family_Law_relabeled0014_attachment }
attachment code: Generic_Motion_Family_Law_relabeled0014_attachment
---
need: Generic_Motion_Family_Law_relabeled0014
attachment:
    variable name: Generic_Motion_Family_Law_relabeled0014_attachment
    name: Generic Motion Family Law
    filename: Generic_Motion_Family_Law
    pdf template file: Generic_Motion_Family_Law_re-labeled.pdf
    skip undefined: True 
    fields: 
      - "docket_number": ${ docket_numbers }
      - "plaintiff": ${ str(plaintiffs) }
      - "defendant": ${ str(defendants) }
      - "user_name": ${ str(users[0]) }
      - "signature_date__1": ${ signature_date }
      - "user_signature": ${ users[0].signature }
      - "user_name__2": ${ str(users[0]) }
      - "user_address_street": ${ users[0].address.line_one() }
      - "user_address_city": ${ users[0].address.city }
      - "user_address_state": ${ users[0].address.state }
      - "user_address_zip": ${ users[0].address.zip }
      - "user_phone": ${ phone_number_pdf }
      - "docket_number__2": ${ docket_numbers }
      - "signature_date__2": ${ signature_date }
      - "other_party_name": ${ str(other_parties[0]) }
      - "other_party_address_street": ${ other_parties[0].address.line_one() }
      - "other_party_address_city": ${ other_parties[0].address.city }
      - "other_party_address_state": ${ other_parties[0].address.state }
      - "other_party_address_zip": ${ other_parties[0].address.zip }
      - "user_signature__2": ${ users[0].signature if ready_to_serve else "" }
      - "court_division": ${ courts[0].division }
      - "motion_name": ${ motion_name }
      - "user_is_petitioner": ${ users[0].is_petitioner }
      - "user_is_defendant": ${ users[0].is_defendant }
      - "user_is_plaintiff": ${ users[0].is_plaintiff }
      - "user_is_respondent": ${ users[0].is_respondent }
      - "user_request": ${ users[0].request }
      - "hearing_city": ${ hearing_city }
      - "hearing_date_month_day_year": ${ hearing_date_month_day_year }
      - "hearing_time": ${ hearing_time.strftime("%H:%M %p") }
      - "bbo_number": ${ bbo_number }
      - "court_division__2": ${ courts[0].division }
      - "motion_name__2": ${ motion_name }
      - "service_by_hand_date": ${ service_by_hand_date }
      - "service_by_hand_time": ${ service_by_hand_time.strftime("%H:%M %p") }
      - "service_by_hand": ${ service_by_hand }
      - "service_by_hand_in_pm": ${ service_by_hand_in_pm }
      - "service_by_hand_in_am": ${ service_by_hand_in_am }
      - "service_by_mailing_date": ${ service_by_mailing_date }
      - "service_by_mailing": ${ ready_to_serve }
      - "emergency": ${ "EMERGENCY" if emergency_basis else "" }
---
continue button field: Generic_Motion_Family_Law_relabeled0014_preview_question
question: |
  Placeholder preview screen
subquestion: |
  Here is a preview of the form you'll sign on the next page. 
  
   ${Generic_Motion_Family_Law_relabeled0014_attachment_preview}
---
attachment:
    variable name: Generic_Motion_Family_Law_relabeled0014_attachment_preview
    name: Generic Motion Family Law
    filename: Generic_Motion_Family_Law
    pdf template file: Generic_Motion_Family_Law_re-labeled.pdf
    skip undefined: True 
    fields: 
      - "docket_number": ${ docket_numbers }
      - "plaintiff": ${ str(plaintiffs) }
      - "defendant": ${ str(defendants) }
      - "user_name": ${ str(users[0]) }
      - "signature_date__1": ${ signature_date }
      - "user_name__2": ${ str(users[0]) }
      - "user_address_street": ${ users[0].address.line_one() }
      - "user_address_city": ${ users[0].address.city }
      - "user_address_state": ${ users[0].address.state }
      - "user_address_zip": ${ users[0].address.zip }
      - "user_phone": ${ phone_number_pdf }
      - "docket_number__2": ${ docket_numbers }
      - "signature_date__2": ${ signature_date }
      - "other_party_name": ${ str(other_parties[0]) }
      - "other_party_address_street": ${ other_parties[0].address.line_one() }
      - "other_party_address_city": ${ other_parties[0].address.city }
      - "other_party_address_state": ${ other_parties[0].address.state }
      - "other_party_address_zip": ${ other_parties[0].address.zip }
      - "court_division": ${ courts[0].division }
      - "motion_name": ${ motion_name }
      - "user_is_petitioner": ${ users[0].is_petitioner }
      - "user_is_defendant": ${ users[0].is_defendant }
      - "user_is_plaintiff": ${ users[0].is_plaintiff }
      - "user_is_respondent": ${ users[0].is_respondent }
      - "user_request": ${ users[0].request }
      - "hearing_city": ${ hearing_city }
      - "hearing_date_month_day_year": ${ hearing_date_month_day_year }
      - "hearing_time": ${ hearing_time.strftime("%H:%M %p") }
      - "bbo_number": ${ bbo_number }
      - "court_division__2": ${ courts[0].division }
      - "motion_name__2": ${ motion_name }
      - "service_by_hand_date": ${ service_by_hand_date }
      - "service_by_hand_time": ${ service_by_hand_time.strftime("%H:%M %p") }
      - "service_by_hand": ${ service_by_hand }
      - "service_by_hand_in_pm": ${ service_by_hand_in_pm }
      - "service_by_hand_in_am": ${ service_by_hand_in_am }
      - "service_by_mailing_date": ${ service_by_mailing_date }
      - "service_by_mailing": ${ ready_to_serve }
      - "emergency": ${ "EMERGENCY" if emergency_basis else "" }


